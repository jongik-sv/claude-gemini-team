#!/usr/bin/env node

/**
 * ÏùëÎãµ ÌååÏÑú ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const { ResponseParser } = require('./src/utils/response-parser');
const chalk = require('chalk');

function testResponseParser() {
    console.log(chalk.bold.blue('üß™ ÏùëÎãµ ÌååÏÑú ÌÖåÏä§Ìä∏ ÏãúÏûë'));
    console.log(chalk.dim('='.repeat(60)));

    const parser = new ResponseParser();

    // ÌÖåÏä§Ìä∏ ÏùëÎãµ ÏÉòÌîåÎì§
    const testResponses = [
        {
            name: 'JSON ÏùëÎãµ',
            text: `ÌîÑÎ°úÏ†ùÌä∏ Î∂ÑÏÑù Í≤∞Í≥ºÏûÖÎãàÎã§:

\`\`\`json
{
    "project_type": "web_application",
    "complexity": "medium",
    "estimated_duration_days": 14,
    "key_technologies": ["javascript", "react", "nodejs"],
    "phases": [
        {
            "name": "planning",
            "description": "ÌîÑÎ°úÏ†ùÌä∏ Í≥ÑÌöç ÏàòÎ¶Ω",
            "estimated_hours": 8
        },
        {
            "name": "development", 
            "description": "Í∞úÎ∞ú Îã®Í≥Ñ",
            "estimated_hours": 32
        }
    ],
    "risks": ["ÏùºÏ†ï ÏßÄÏó∞", "Í∏∞Ïà†Ï†Å Î≥µÏû°ÏÑ±"]
}
\`\`\`

Ïù¥ Î∂ÑÏÑùÏùÑ Î∞îÌÉïÏúºÎ°ú ÏßÑÌñâÌïòÏãúÎ©¥ Îê©ÎãàÎã§.`
        },
        {
            name: 'ÏΩîÎìú ÏùëÎãµ',
            text: `Îã§ÏùåÏùÄ React Ïª¥Ìè¨ÎÑåÌä∏ ÏòàÏãúÏûÖÎãàÎã§:

\`\`\`javascript
import React, { useState } from 'react';

function TodoApp() {
    const [todos, setTodos] = useState([]);
    const [input, setInput] = useState('');

    const addTodo = () => {
        if (input.trim()) {
            setTodos([...todos, { id: Date.now(), text: input, completed: false }]);
            setInput('');
        }
    };

    return (
        <div className="todo-app">
            <h1>Todo List</h1>
            <div>
                <input 
                    value={input} 
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="ÏÉà Ìï†Ïùº ÏûÖÎ†•"
                />
                <button onClick={addTodo}>Ï∂îÍ∞Ä</button>
            </div>
            <ul>
                {todos.map(todo => (
                    <li key={todo.id}>{todo.text}</li>
                ))}
            </ul>
        </div>
    );
}

export default TodoApp;
\`\`\`

Ïù¥ Ïª¥Ìè¨ÎÑåÌä∏Îäî Í∏∞Î≥∏Ï†ÅÏù∏ Ìï†Ïùº Í¥ÄÎ¶¨ Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.`
        },
        {
            name: 'ÎßàÌÅ¨Îã§Ïö¥ Íµ¨Ï°∞ ÏùëÎãµ',
            text: `# ÌîÑÎ°úÏ†ùÌä∏ Ïã§Ìñâ Í≥ÑÌöç

## Í∞úÏöî
Ïù¥ ÌîÑÎ°úÏ†ùÌä∏Îäî Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∞úÎ∞úÏùÑ Î™©ÌëúÎ°ú Ìï©ÎãàÎã§.

## Ï£ºÏöî Îã®Í≥Ñ

### 1Îã®Í≥Ñ: ÏöîÍµ¨ÏÇ¨Ìï≠ Î∂ÑÏÑù
- ÏÇ¨Ïö©Ïûê Ïä§ÌÜ†Î¶¨ ÏûëÏÑ±
- Í∏∞Îä• Î™ÖÏÑ∏ÏÑú ÏûëÏÑ±
- Í∏∞Ïà† Ïä§ÌÉù Í≤∞Ï†ï

### 2Îã®Í≥Ñ: ÎîîÏûêÏù∏ 
- UI/UX ÎîîÏûêÏù∏
- Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Í≥Ñ
- API ÏÑ§Í≥Ñ

### 3Îã®Í≥Ñ: Í∞úÎ∞ú
- ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞ú
- Î∞±ÏóîÎìú Í∞úÎ∞ú  
- ÌÖåÏä§Ìä∏ ÏΩîÎìú ÏûëÏÑ±

## ÏòàÏÉÅ ÏùºÏ†ï

| Îã®Í≥Ñ | ÏòàÏÉÅ Í∏∞Í∞Ñ | Îã¥ÎãπÏûê |
|------|-----------|---------|
| ÏöîÍµ¨ÏÇ¨Ìï≠ Î∂ÑÏÑù | 3Ïùº | PM |
| ÎîîÏûêÏù∏ | 5Ïùº | ÎîîÏûêÏù¥ÎÑà |
| Í∞úÎ∞ú | 15Ïùº | Í∞úÎ∞úÌåÄ |

## Ï£ºÏöî ÏúÑÌóò ÏöîÏÜå
- **ÏùºÏ†ï ÏßÄÏó∞**: ÏöîÍµ¨ÏÇ¨Ìï≠ Î≥ÄÍ≤ΩÏúºÎ°ú Ïù∏Ìïú ÏßÄÏó∞ Í∞ÄÎä•ÏÑ±
- **Í∏∞Ïà†Ï†Å Î≥µÏû°ÏÑ±**: ÏÉàÎ°úÏö¥ Í∏∞Ïà† Ïä§ÌÉù ÌïôÏäµ ÌïÑÏöî
- **ÌåÄ ÌòëÏóÖ**: ÏõêÍ≤© ÌòëÏóÖÏúºÎ°ú Ïù∏Ìïú Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïù¥Ïäà`
        },
        {
            name: 'ÏùºÎ∞ò ÌÖçÏä§Ìä∏ ÏùëÎãµ',
            text: `ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌîÑÎ°úÏ†ùÌä∏ Î∂ÑÏÑùÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§. 

Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú Ïù¥ ÌîÑÎ°úÏ†ùÌä∏Îäî Ï§ëÍ∞Ñ ÎÇúÏù¥ÎèÑÏùò Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∞úÎ∞ú ÌîÑÎ°úÏ†ùÌä∏Î°ú Î≥¥ÏûÖÎãàÎã§. ReactÏôÄ Node.jsÎ•º Í∏∞Î∞òÏúºÎ°ú ÌïòÎäî Î™®Îçò Ïõπ Ïä§ÌÉùÏùÑ ÏÇ¨Ïö©ÌïòÍ≤å Îê† Í≤É Í∞ôÏäµÎãàÎã§.

Í∞úÎ∞ú Í∏∞Í∞ÑÏùÄ ÎåÄÎûµ 2-3Ï£º Ï†ïÎèÑ ÏÜåÏöîÎê† Í≤ÉÏúºÎ°ú ÏòàÏÉÅÎêòÎ©∞, ÌäπÌûà Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Í≥ÑÏôÄ API Í∞úÎ∞ú Î∂ÄÎ∂ÑÏóêÏÑú Ïã†Ï§ëÌïú Ï†ëÍ∑ºÏù¥ ÌïÑÏöîÌï† Í≤É Í∞ôÏäµÎãàÎã§.

ÌåÄ Íµ¨ÏÑ±ÏùÄ ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûê 2Î™Ö, Î∞±ÏóîÎìú Í∞úÎ∞úÏûê 1Î™Ö Ï†ïÎèÑÍ∞Ä Ï†ÅÏ†àÌï† Í≤É Í∞ôÏäµÎãàÎã§. ÌîÑÎ°úÏ†ùÌä∏ Îß§ÎãàÏ†ÄÍ∞Ä Ï†ÑÏ≤¥Ï†ÅÏù∏ ÏßÑÌñâ ÏÉÅÌô©ÏùÑ Í¥ÄÎ¶¨ÌïòÎ©¥ÏÑú ÏùºÏ†ïÏùÑ Ï°∞Ïú®ÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.

Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÏãúÎ©¥ Ïñ∏Ï†úÎì† Î¨∏ÏùòÌï¥ Ï£ºÏÑ∏Ïöî! üòä`
        }
    ];

    // Í∞Å ÏùëÎãµ ÌÖåÏä§Ìä∏
    testResponses.forEach((sample, index) => {
        console.log(chalk.cyan(`\nüß© ÌÖåÏä§Ìä∏ ${index + 1}: ${sample.name}`));
        console.log(chalk.dim('-'.repeat(50)));

        const parsed = parser.parseResponse(sample.text, 'claude');
        parser.displayParsedResponse(parsed);

        // Í∞ÑÎã®Ìïú Í≤ÄÏ¶ù
        console.log(chalk.green(`‚úÖ ÌååÏã± ÏôÑÎ£å - ÌòïÏãù: ${getDetectedFormats(parsed)}`));
    });

    // Îπà ÏùëÎãµ ÌÖåÏä§Ìä∏
    console.log(chalk.cyan('\nüß© ÌÖåÏä§Ìä∏ 5: Îπà ÏùëÎãµ'));
    console.log(chalk.dim('-'.repeat(50)));
    const emptyParsed = parser.parseResponse('', 'gemini');
    parser.displayParsedResponse(emptyParsed);

    console.log(chalk.bold.green('\nüéâ Î™®Îì† ÌÖåÏä§Ìä∏ ÏôÑÎ£å!'));
}

function getDetectedFormats(parsed) {
    const formats = [];
    if (parsed.structure.hasJson) formats.push('JSON');
    if (parsed.structure.hasCode) formats.push('Code');
    if (parsed.structure.hasMarkdown) formats.push('Markdown');
    if (parsed.structure.hasList) formats.push('List');
    if (parsed.structure.hasTable) formats.push('Table');
    return formats.length > 0 ? formats.join(', ') : 'Text';
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
    testResponseParser();
}

module.exports = { testResponseParser };